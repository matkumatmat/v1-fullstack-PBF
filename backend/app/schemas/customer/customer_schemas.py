from datetime import datetime, date
from decimal import Decimal
from typing import Optional, List, Any
from uuid import UUID
from pydantic import BaseModel, Field

from ..customer_type import CustomerType
from ..sector_type import SectorType
from ..order_process.sales_order_schemas import SalesOrder
from ..product.product_schemas import Allocation

# --- CustomerAddress Schemas ---

# Model untuk multiple addresses per customer
class CustomerAddressBase(BaseModel):
    customer_id: int
    address_name: str
    address_type: str = Field(default='DELIVERY')
    address_line1: str
    address_line2: Optional[str] = None
    city: str
    state_province: Optional[str] = None
    postal_code: Optional[str] = None
    country: str = Field(default='Indonesia')
    contact_person: Optional[str] = None
    contact_phone: Optional[str] = None
    contact_email: Optional[str] = None
    delivery_instructions: Optional[str] = None
    special_requirements: Optional[str] = None
    latitude: Optional[float] = None
    longitude: Optional[float] = None
    is_active: bool = Field(default=True)
    created_by: Optional[str] = None

class CustomerAddressCreate(CustomerAddressBase):
    # Fields like 'id', 'public_id', 'created_date' are omitted as they are
    # typically generated by the database/server.
    pass

class CustomerAddressUpdate(CustomerAddressBase):
    """
    Schema for updating an existing CustomerAddress.
    All fields are optional for partial updates.
    Use model_dump(exclude_unset=True) when converting to dict for update.
    """
    customer_id: Optional[int] = None
    address_name: Optional[str] = None
    address_type: Optional[str] = None
    address_line1: Optional[str] = None
    address_line2: Optional[str] = None
    city: Optional[str] = None
    state_province: Optional[str] = None
    postal_code: Optional[str] = None
    country: Optional[str] = None
    contact_person: Optional[str] = None
    contact_phone: Optional[str] = None
    contact_email: Optional[str] = None
    delivery_instructions: Optional[str] = None
    special_requirements: Optional[str] = None
    latitude: Optional[float] = None
    longitude: Optional[float] = None
    is_active: Optional[bool] = None
    created_by: Optional[str] = None

class CustomerAddressInDBBase(CustomerAddressBase):
    id: int
    public_id: UUID
    created_date: datetime
    # Relationship fields
    customer: Optional['Customer'] = None # 'Customer' is a forward reference

    class Config:
        from_attributes = True

class CustomerAddress(CustomerAddressInDBBase):
    pass


# --- Customer Schemas ---

class CustomerBase(BaseModel):
    code: str
    name: str
    customer_type_id: int
    sector_type_id: int

class CustomerCreate(CustomerBase):
    # Fields like 'id', 'public_id' are omitted as they are
    # typically generated by the database/server.
    pass

class CustomerUpdate(CustomerBase):
    """
    Schema for updating an existing Customer.
    All fields are optional for partial updates.
    Use model_dump(exclude_unset=True) when converting to dict for update.
    """
    code: Optional[str] = None
    name: Optional[str] = None
    customer_type_id: Optional[int] = None
    sector_type_id: Optional[int] = None

class CustomerInDBBase(CustomerBase):
    id: int
    public_id: UUID

    # Relationship fields
    # Assuming these related models (CustomerType, SectorType, SalesOrder, Allocation)
    # would also be converted to Pydantic schemas if their SQLAlchemy definitions were provided.
    customer_type: Optional['CustomerType'] = None
    sector_type: Optional['SectorType'] = None
    sales_orders: List['SalesOrder'] = []
    allocations: List['Allocation'] = []
    addresses: List['CustomerAddress'] = [] # Refers to the CustomerAddress Pydantic model

    class Config:
        from_attributes = True

class Customer(CustomerInDBBase):
    pass


# --- Forward reference rebuilding ---
# These calls are necessary to resolve circular dependencies or forward references
# where models refer to each other or to models defined later in the script.
CustomerAddressInDBBase.model_rebuild()
CustomerInDBBase.model_rebuild()